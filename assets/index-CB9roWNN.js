
/**
 * 由 Fantastic-admin 提供技术支持
 * Powered by Fantastic-admin
 * https://fantastic-admin.hurui.me
 */
    
import{_ as i}from"./index.vue_vue_type_script_setup_true_lang-dmrcc3Eo.js";import{d as c,c as s,o as f,k as n,aa as r,m as t,a,W as e}from"./index-Bnionyve.js";import{_ as d}from"./_demo1.vue_vue_type_script_setup_true_lang-CcOZfm4D.js";import{_ as m}from"./_demo2.vue_vue_type_script_setup_true_lang-DPTymQV_.js";import{_ as u}from"./_demo3.vue_vue_type_script_setup_true_lang-DqJUQdr7.js";import"./index-Ci0lfOFO.js";const p='<script setup lang="ts">\nimport { useFaModal } from \'@/ui/components/FaModal\'\n\nconst modal = ref(false)\nconst modalInfo = ref({\n  maximizable: false,\n  closable: true,\n  draggable: false,\n  center: false,\n  header: true,\n  footer: true,\n  contentHeight: \'\',\n  loading: false,\n  class: \'\',\n})\nwatch(() => modalInfo.value.loading, (loading) => {\n  if (loading) {\n    setTimeout(() => {\n      modalInfo.value.loading = false\n    }, 3000)\n  }\n})\n\nfunction handleBeforeClose(action: \'confirm\' | \'cancel\' | \'close\', done: () => void) {\n  if (action === \'close\') {\n    useFaModal().confirm({\n      title: \'提示\',\n      content: \'确定要关闭吗？\',\n      onConfirm: () => {\n        done()\n      },\n    })\n  }\n  else {\n    done()\n  }\n}\n<\/script>\n\n<template>\n  <FaButton @click="modal = true">\n    打开\n  </FaButton>\n  <FaModal v-model="modal" title="标题" description="这里是一段描述介绍" :maximizable="modalInfo.maximizable" :closable="modalInfo.closable" :draggable="modalInfo.draggable" :center="modalInfo.center" :loading="modalInfo.loading" :header="modalInfo.header" :footer="modalInfo.footer" :before-close="handleBeforeClose" :class="modalInfo.class">\n    <div :class="modalInfo.contentHeight">\n      <div class="flex-start-center flex-wrap gap-2">\n        <FaButton :variant="modalInfo.maximizable ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.maximizable = !modalInfo.maximizable">\n          最大化按钮\n        </FaButton>\n        <FaButton :variant="modalInfo.closable ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.closable = !modalInfo.closable">\n          关闭按钮\n        </FaButton>\n        <FaButton :variant="modalInfo.draggable ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.draggable = !modalInfo.draggable">\n          拖拽\n        </FaButton>\n        <FaButton :variant="modalInfo.center ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.center = !modalInfo.center">\n          居中显示\n        </FaButton>\n        <FaButton :variant="modalInfo.header ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.header = !modalInfo.header">\n          头部区域\n        </FaButton>\n        <FaButton :variant="modalInfo.footer ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.footer = !modalInfo.footer">\n          尾部区域\n        </FaButton>\n        <FaButton :variant="!!modalInfo.contentHeight ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.contentHeight = !!modalInfo.contentHeight ? \'\' : \'h-400\'">\n          切换内容高度\n        </FaButton>\n        <FaButton variant="outline" class="w-full" @click="modalInfo.loading = true">\n          显示加载中\n        </FaButton>\n        <FaButton :variant="!!modalInfo.class ? \'default\' : \'outline\'" class="w-full" @click="modalInfo.class = !!modalInfo.class ? \'\' : \'max-w-2xl\'">\n          调整最大宽度\n        </FaButton>\n      </div>\n    </div>\n  </FaModal>\n</template>\n',F="<script setup lang=\"ts\">\nimport { toast } from 'vue-sonner'\nimport { useFaModal } from '@/ui/components/FaModal'\n\nfunction showModalInfo() {\n  useFaModal().info({\n    title: '温馨提醒',\n    content: '这是 info 弹窗',\n    onConfirm: () => {\n      toast.info('你点了确定')\n    },\n  })\n}\nfunction showModalSuccess() {\n  useFaModal().success({\n    title: '温馨提醒',\n    content: '这是 success 弹窗',\n    onConfirm: () => {\n      toast.info('你点了确定')\n    },\n  })\n}\nfunction showModalWarning() {\n  useFaModal().warning({\n    title: '温馨提醒',\n    content: '这是 warning 弹窗',\n    onConfirm: () => {\n      toast.info('你点了确定')\n    },\n  })\n}\nfunction showModalError() {\n  useFaModal().error({\n    title: '温馨提醒',\n    content: '这是 confirm 弹窗',\n    onConfirm: () => {\n      toast.info('你点了确定')\n    },\n  })\n}\nfunction showModalConfirm() {\n  useFaModal().confirm({\n    title: '温馨提醒',\n    content: '这是 confirm 弹窗',\n    onConfirm: () => {\n      toast.info('你点了确定')\n    },\n  })\n}\nfunction showModalDoubleConfirm() {\n  const { update } = useFaModal().confirm({\n    title: '温馨提醒',\n    content: '这是 confirm 弹窗',\n    beforeClose: (action, done) => {\n      if (action === 'confirm') {\n        update({\n          title: '二次确认',\n          content: '确定要关闭吗？',\n          confirmButtonText: '我确定',\n          cancelButtonText: '我取消',\n          beforeClose: (action) => {\n            if (action === 'confirm') {\n              done()\n            }\n            else {\n              done()\n            }\n          },\n        })\n      }\n      else {\n        done()\n      }\n    },\n  })\n}\nfunction showModalPromiseConfirm() {\n  useFaModal().confirm({\n    title: '温馨提醒',\n    content: '这是 confirm 弹窗',\n    confirmButtonText: '确认（随机成功或失败）',\n    beforeClose: async (action, done) => {\n      if (action === 'confirm') {\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        if (Math.random() > 0.5) {\n          toast.success('成功了！')\n          done()\n        }\n        else {\n          toast.error('失败了！')\n        }\n      }\n      else {\n        done()\n      }\n    },\n  })\n}\n<\/script>\n\n<template>\n  <div class=\"flex gap-4\">\n    <FaButton @click=\"showModalInfo\">\n      Info\n    </FaButton>\n    <FaButton @click=\"showModalSuccess\">\n      Success\n    </FaButton>\n    <FaButton @click=\"showModalWarning\">\n      Warning\n    </FaButton>\n    <FaButton @click=\"showModalError\">\n      Error\n    </FaButton>\n    <FaButton @click=\"showModalConfirm\">\n      Confirm\n    </FaButton>\n    <FaButton @click=\"showModalDoubleConfirm\">\n      Double Confirm\n    </FaButton>\n    <FaButton @click=\"showModalPromiseConfirm\">\n      Confirm with promise\n    </FaButton>\n  </div>\n</template>\n",B="<script setup lang=\"tsx\">\nimport { useFaModal } from '@/ui/components/FaModal'\n\nconst TestComponent = defineComponent({\n  props: {\n    close: {\n      type: Function,\n    },\n  },\n  setup(props) {\n    const val = ref('123')\n    return () => (\n      <div class=\"flex flex-col gap-4\">\n        <input v-model={val.value} class=\"w-full border rounded-md p-2\" />\n        <fa-button onClick={() => props.close?.()}>\n          组件内部关闭弹窗\n        </fa-button>\n      </div>\n    )\n  },\n})\n\nconst { open, close } = useFaModal().create({\n  title: '标题',\n  description: '这里是一段描述介绍',\n  beforeClose: (action, done) => {\n    if (action === 'close') {\n      useFaModal().confirm({\n        title: '提示',\n        content: '确定要关闭吗？',\n        onConfirm: () => {\n          done()\n        },\n      })\n    }\n    else {\n      done()\n    }\n  },\n  content: () => h(TestComponent, { close }),\n})\n<\/script>\n\n<template>\n  <FaButton @click=\"open\">\n    打开\n  </FaButton>\n</template>\n",I=c({__name:"index",setup(g){return(w,h)=>{const l=r,o=i;return f(),s("div",null,[n(l,{title:"弹窗",description:"FaModal"}),n(o,{code:a(p)},{default:t(()=>[n(d)]),_:1},8,["code"]),n(o,{title:"对话框",code:a(F)},{default:t(()=>[n(m)]),_:1},8,["code"]),n(o,{title:"函数式调用",code:a(B)},{default:t(()=>[n(u)]),_:1},8,["code"])])}}});typeof e=="function"&&e(I);export{I as default};
